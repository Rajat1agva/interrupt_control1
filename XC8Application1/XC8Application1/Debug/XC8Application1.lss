
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001b4  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00003589  00000000  00000000  00000213  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00002eae  00000000  00000000  0000379c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000338  00000000  00000000  0000664a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00006984  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000014e3  00000000  00000000  000069e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000056  00000000  00000000  00007ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00007f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000015c  0000015c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.interrupt_init 0000000c  0000014a  0000014a  0000019e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000006  00000156  00000156  000001aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_29 00000032  00000118  00000118  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 80 00 	jmp	0x100	; 0x100 <__ctors_end>
   4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
   8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
   c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  10:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  38:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  3c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  40:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  4c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  50:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  54:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  58:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  5c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  60:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  68:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  6c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  70:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <_etext>
  78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  7c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  80:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  84:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  8c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  90:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  94:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  98:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  9c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  a0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  a4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  a8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  ac:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  b0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  b4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  b8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  bc:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  c0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  c4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  c8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  cc:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  d0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  d4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  d8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  dc:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  e0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  e4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  e8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  ec:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  f0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  f4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  f8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  fc:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>

00000100 <__ctors_end>:
 100:	11 24       	eor	r1, r1
 102:	1f be       	out	0x3f, r1	; 63
 104:	cf ef       	ldi	r28, 0xFF	; 255
 106:	cd bf       	out	0x3d, r28	; 61
 108:	df e7       	ldi	r29, 0x7F	; 127
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0e 94 ab 00 	call	0x156	; 0x156 <main>
 110:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>

Disassembly of section .text:

0000015c <__bad_interrupt>:
 15c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.interrupt_init:

0000014a <interrupt_init>:
}


void interrupt_init(void)
{
   	PORTC_PIN2CTRL |= FALLING_EDGE; //Enabling Falling Edge Interrupt for PC2 
 14a:	e2 e5       	ldi	r30, 0x52	; 82
 14c:	f4 e0       	ldi	r31, 0x04	; 4
 14e:	80 81       	ld	r24, Z
 150:	83 60       	ori	r24, 0x03	; 3
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

Disassembly of section .text.main:

00000156 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>
#define FALLING_EDGE 0x3
void interrupt_init(void);
int main(void)
{   interrupt_init();
 156:	0e 94 a5 00 	call	0x14a	; 0x14a <interrupt_init>
 15a:	ff cf       	rjmp	.-2      	; 0x15a <main+0x4>

Disassembly of section .text.__vector_29:

00000118 <__vector_29>:
void interrupt_init(void)
{
   	PORTC_PIN2CTRL |= FALLING_EDGE; //Enabling Falling Edge Interrupt for PC2 
}
ISR (PORTC_PORT_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	0b b6       	in	r0, 0x3b	; 59
 124:	0f 92       	push	r0
 126:	8f 93       	push	r24
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	 PORTC.INTFLAGS |=0x4;              //Reset interrupt flag 
 12c:	e0 e4       	ldi	r30, 0x40	; 64
 12e:	f4 e0       	ldi	r31, 0x04	; 4
 130:	81 85       	ldd	r24, Z+9	; 0x09
 132:	84 60       	ori	r24, 0x04	; 4
 134:	81 87       	std	Z+9, r24	; 0x09
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0b be       	out	0x3b, r0	; 59
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti
